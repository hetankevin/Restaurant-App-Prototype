#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var debug = require('debug')('stunningpotato:server');
var http = require('http');
var socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketio(server);

/**
 * Listen on provided port, on all network interfaces.
 */
const connections = [null, null];

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log("Listening on port", port);

var usernames = {};
var rooms = [];
var id = 0;

io.on('connection', function(socket) {
  /*
  let userIndex = -1;
  for (const i in connections) {
    if (connections[i] == null) {
      userIndex = i;
      break;
    }
  }
  socket.emit('user-number', userIndex);
  if (userIndex == -1) return;
  connections[userIndex] = socket;
  socket.broadcast.emit('user-connect', userIndex);
  */

  //1. Add user w/ new room
  socket.on('addUserNewRoom', function(username) {
    socket.username = username;
    var room = 'room' + id++;
    socket.room = room;
    usernames.push(username);
    rooms.push({name: room, open: true});
    socket.join(room);
    socket.emit('updateChat',
        'SERVER', 'you have connected to ' + room);
    socket.broadcast.to(room).emit('updateChat',
        'SERVER', username + ' has connected to this room');
    //superfluous, maybe
    socket.emit('updateRooms', rooms, room);
  });

  //2. Add user to existing room
  socket.on('addUserOldRoom', function(username, roomID) {
    var room = 'room' + roomID;
    if (!rooms[roomID].open) {
      socket.emit('updateChat',
          'SERVER', 'you have failed to join ' + room);
      return;
    }
    socket.username = username;
    var room = 'room' + roomID;
    socket.room = room;
    usernames.push(username);
    socket.join(room);
    socket.emit('updateChat',
        'SERVER', 'you have connected to ' + room);
    socket.broadcast.to(room).emit('updateChat',
        'SERVER', username + ' has connected to this room');
    //superfluous, maybe
    socket.emit('updateRooms', rooms, room);
  });

  //3. Activate room, room can no longer be joined
  socket.on('activateRoom', function() {
    /** @namespace socket.room **/
    var room = socket.room;
    var roomID = parseInt(room.substr(4));
    rooms[roomID].open = false;
    socket.broadcast.to(room).emit('updateChat',
        'SERVER', 'This room is now closed. Happy browsing!');
  });

  //4. Disconnect
  socket.on('disconnect', function() {
    delete usernames[socket.username];
    socket.broadcast.emit('updateChat',
        'SERVER', socket.username + ' has disconnected.');
  });
})



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onChoice(data) {

}

function onConnection(socket) {

}