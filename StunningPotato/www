#!/usr/bin/env node

let roomIdToName = {};
let peopleInRoom = {};
let peopleIDUsername = {};
let peopleIDSocket = {};
let roomData = {};
let roomBudget = 1;
let pltet = [];
let idx = 0;
let responses = [];
/**
 * Module dependencies.
 */

var express = require('express');
var app = express();
var debug = require('debug')('stunningpotato:server');
var http = require('http');
var socketio = require('socket.io');
var FoodLocations = require('./public/utils/foodLocations.js')
var path = require('path')

var cookieParser = require('cookie-parser');
var logger = require('morgan');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketio(server);

var indexRouter = require('./routes/index');

app.use('/', indexRouter);

app.get('/:room', (req, res) => {
  console.log(req.params.room);
  console.log(roomIdToName);
  if (roomIdToName[req.params.room] == null) {
    res.sendFile(path.join(__dirname, '/../views/noroom.html'));
  } else {
    res.render('room.pug', {roomName: roomIdToName[req.params.room], roomId: req.params.room});
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log("Listening on port", port);

var crypto = require('crypto');

function generateUserID() {
  let userid;
  do {
    userid = crypto.randomBytes(2).toString("hex");
  } while (peopleIDUsername[userid] != null);

  //let randomCharacter = '1' // Chosen by random number generator, guaranteed to be random.
  return userid;
}

//load in data

io.on('connection', function(socket) {

  let userid;
  let room = null;
  let currentpage = 0;
  var locs = new FoodLocations.FoodLocations(socket);

  socket.on('need user id', () => {
    socket.emit('user id', generateUserID());
  });

  socket.on('register', (data) => {
    peopleIDUsername[data.id] = data.username;
    userid = data.id;
    console.log("User id is now", userid);
  });

  socket.on('logout', (id) => {
    peopleIDUsername[id] = null;
    peopleIDSocket[id] = null;
  });

  // index.html
  socket.on('createroom', (data) => {
    if (roomIdToName[data.roomid] != null) {
      socket.emit('roomexists');
      return;
    }
    roomIdToName[data.roomid] = data.roomname;
    peopleInRoom[data.roomid] = Array(0);
    roomData[data.roomid] = {
      closed: false
    };
    socket.emit('roomcreated');
  });

  socket.on('joinroom', (data) => {
    if (roomIdToName[data.roomid] == null || roomData[data.roomid].closed) {
      socket.emit('roomdne');
      return;
    }
    socket.emit('roomjoinable');
  })

  // room_socket.js
  socket.on('join', (data) => {
    currentpage = 1;
    userid = data.id;
    socket.join(data.room, () => {
      room = data.room;
      peopleInRoom[data.room].push({id: data.id, username: data.username});
      io.to(data.room).emit('user joined', {id: data.id, username: data.username, people: peopleInRoom[data.room]});
    });
  });

  socket.on('message', (data) => {
    io.to(data.room).emit('message', {id: data.id, username: data.username, message: data.message});
  });

  socket.on('bye', (data) => {
    socket.leave(data.room);
    room = null;
    peopleInRoom[data.room] = peopleInRoom[data.room].filter((x) => x.id !== data.id);
    if (peopleInRoom[data.room].length != 0) {
      io.to(data.room).emit('user left', {id: data.id, username: data.username, people: peopleInRoom[data.room]});
    } else {
      peopleInRoom[data.room] = null;
      roomIdToName[data.room] = null;
    }
    currentpage = 0;
  });

  socket.on('disconnecting', () => {
    if (currentpage === 0) {
      return;
    }
    peopleInRoom[room] = peopleInRoom[room].filter((x) => x.id !== userid);
    if (peopleInRoom[room].length != 0) {
      io.to(room).emit('user left', {id: userid, username: peopleIDUsername[userid], people: peopleInRoom[room]});
    } else {
      peopleInRoom[room] = null;
      roomIdToName[room] = null;
    }
    peopleIDUsername[userid] = null;
    room = null;
  });

  socket.on('roomclosed', (data) => {
    if (roomData[data.room].closed) {
      return;
    }
    roomData[data.room].closed = true;
    io.to(data.room).emit('room closed', {id: data.id, username: data.username});
    io.to(data.room).emit('budget');
  });

  function sendRestaurant() {
    let loc = locs[pltet[idx]];
    let rtg = loc.rating/10 + '.' + loc.rating%10;
    let budg = '';
    for(let i = 0; i < roomBudget.length; ++i) budg += '$';
    io.to(room).emit('restaurant', {n: loc.name, r: rtg, b : budg});
  }

  socket.on('budget', function(bud) {
    responses.push(bud);
    if (responses.length == peopleInRoom[room].length){
      responses.sort();
      if (responses.length % 2 === 0) {
        roomBudget = (responses[responses.length/2].length
            + responses[responses.length/2 + 1])/2;
      }
      else {
        roomBudget = responses[responses.length/2];
      }
      io.to(room).emit('roombudget', roomBudget);
      responses = [];

      //add food places

      pltet = locs.priceLTEqualTo(roomBudget);
      sendRestaurant();
    }
  });


  socket.on('responding', function(response) {
    //if received no, sendFailure, sendRestaurant, return
    if (response == 'no') {
      responses.clear();
      io.to(room).emit('failure');
      sendRestaurant();
      ++idx;
      idx %= locs.length;
    } //check for all responses, if not all, return
    else if (responses.length + 1 != peopleInRoom.length) {
      responses.push(response);
    }
    else {
      io.to(room).emit('endGame', locs[pltet[idx]].name);
    }
  });


});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onChoice(data) {

}

function onConnection(socket) {

}
